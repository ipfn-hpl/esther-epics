# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#

# option definitions common to all supported networks...
option domain-name "estherhpl.local";
#option domain-name-servers ns1.example.org, ns2.example.org;
option domain-name-servers 10.10.10.20, 10.10.10.21, 192.168.0.98, 1.1.1.1, 8.8.8.8;
#option domain-name "example.org";
#option domain-name-servers ns1.example.org, ns2.example.org;

default-lease-time 600;
max-lease-time 7200;

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.
subnet 192.168.0.0 netmask 255.255.255.0 {
   range 192.168.0.10 192.168.0.40;
   option routers 192.168.0.98;
}

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.example.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.example.com;
#}
# find MAC addres with
# sudo nmap -sP -n 192.168.0.0/24
host rpi4-vacuum {
  hardware ethernet e4:5f:01:6c:c4:b1;
  fixed-address 192.168.0.22;
}

# Bomba 2
host gx600l-CTST {
  hardware ethernet 00:0C:6D:00:A1:8D;
  fixed-address 192.168.0.41;
}

# Bomba 1
#MAC Address: 00:0C:6D:00:A1:F5 (Edwards)
host gx600l-STDP {
  hardware ethernet 00:0C:6D:00:A1:F5;
  fixed-address 192.168.0.42;
}

#MAC Address: 00:80:F4:E4:89:F9 (Telemecanique Electrique)
host smartlink {
  hardware ethernet 00:80:f4:e4:89:f9;
  fixed-address 192.168.0.51;
}

host apcupsbunker {
  hardware ethernet 60:19:29:10:21:d0;
  fixed-address 192.168.0.52;
}

host apcupscontrol {
  hardware ethernet 60:19:29:10:21:5d;
  fixed-address 192.168.0.53;
}

#MAC Address: 00:80:67:90:AC:9A (Square D Company)
host powerlogic-pm5300 {
  hardware ethernet 0:80:67:90:ac:9a;
  fixed-address 192.168.0.54;
}
# red pitaya 00:26:32:f0:19:c9
host red-pitaya {
  hardware ethernet 00:26:32:f0:19:c9;
  fixed-address 192.168.0.55;
}

# Galatea Motherboard eno1: 
#    altname enp0s25
host galatea {
  hardware ethernet 38:2c:4a:bd:f9:8d;
  fixed-address 192.168.0.99;
}

# Golmi PC eth05 (PCIe board) 14:cc:20:05:c6:05
#host golmi {
#  hardware ethernet  14:cc:20:05:c6:05;
#  fixed-address 192.168.0.99;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.



#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
