/**
/**  vim: set filetype=c :
 * Use :SyntasticToggleMode
 *
 * vim: sta:et:sw=4:ts=4:sts=4 :
 *
 * Project       :  ESTHER Vacuum slow Control
 * Docs: https://www-csr.bessy.de/control/SoftDist/sequencer/
 *
 * Description   : VAcuum Sequence State Machine
 *
 * Author(s)     : Bernardo Carvalho (IPFN-IST)
 *               : Paulo Fortuna Carvalho (IPFN-IST)
 * Copyright (c) : (IPFN-IST)
 *
 * Created 5-Sep-2022
 * Revised 
 * Modified 
 *
 **/

program sncEstherVacuum ("output=logFile.txt")
%{#include "errlog.h"}%
%%#include <fcntl.h>    /* for exit() */
%%#include <stdio.h>    /* for  */
%%#include <stdlib.h>    /* for  */
%%#include <string.h>

short POS_Idle = 0;
short POS_Stopped =1;
short POS_Starting=2;
short POS_LowVacuum=3;
short POS_WaitShot=4;
short POS_Stopping=5;
short POS_Emergency=7;
short POS_UPSEmergency=8;

short OFF=0;
short ON=1;
short STOP=0;
short STOP_REQ=1;
short START=1;
short CLEAN=0;
short SHOT=1;
short NO_ALARM=0;
short MINOR=1;
short MAJOR=2;
short INVALID=3;


/* PV variables  
double v;
assign v to "{unit}:aiExample";
monitor v;
*/

short OPSTATE;
assign OPSTATE to "{unit}:Vacuum:OPSTATE";
monitor OPSTATE;

short LAST_OPSTATE;
assign LAST_OPSTATE to "{unit}:Vacuum:LAST-OPSTATE";
monitor LAST_OPSTATE;

short StartReq;
assign StartReq to "{unit}:Vacuum:START-REQ";
monitor StartReq;

short StopReq;
assign StopReq to "{unit}:Vacuum:STOP-REQ";
monitor StopReq;

short Countup;
assign Countup to "{unit}:Vacuum:COUNTUP";
monitor Countup;

short CountupDisa;
assign CountupDisa to "{unit}:Vacuum:COUNTUP.DISA";

float ADC1_Pressure;
assign ADC1_Pressure "{unit}:Vacuum:01:ReadPressure";
monitor ADC1_Pressure;

float ADC1_PressureHigh;
assign ADC1_PressureHigh "{unit}:Vacuum:01:ReadPressure.HIGH";
float ADC1_PressureLow;
assign ADC1_PressureLow "{unit}:Vacuum:01:ReadPressure.LOW";

float ADC2_Pressure;
assign ADC2_Pressure "{unit}:Vacuum:02:ReadPressure";
monitor ADC2_Pressure;
float ADC2_PressureHigh;
assign ADC2_PressureHigh "{unit}:Vacuum:02:ReadPressure.HIGH";
float ADC2_PressureLow;
assign ADC2_PressureLow "{unit}:Vacuum:02:ReadPressure.LOW";
float ADC_PressureLowThres;
assign ADC_PressureLowThres "{unit}:Vacuum:PressureLowThres";
monitor ADC_PressureLowThres;
float ADC_PressureHighThres;
assign ADC_PressureHighThres "{unit}:Vacuum:PressureHighThres";
monitor ADC_PressureHighThres;

/* /dev/gatevalveCTST 
short gatevalveCTST_In;
assign gatevalveCTST_In "{unit}:HVA:3:SwitchIn";
short gatevalveCTST_Out;
assign gatevalveCTST_Out "{unit}:HVA:3:SwitchOut";
short gatevalveCTST_LimitIn;
assign gatevalveCTST_LimitIn "{unit}:HVA:3:LimitIn";
monitor gatevalveCTST_LimitIn;
short gatevalveCTST_LimitOut;
assign gatevalveCTST_LimitOut "{unit}:HVA:3:LimitOut";
monitor gatevalveCTST_LimitOut;
*/
/*
short GV_CTST_Lim_In;
assign GV_CTST_Lim_In to "{unit}:HVA:4:LimitIn";
monitor GV_CTST_Lim_In;
short GV_CTST_Lim_Out;
assign GV_CTST_Lim_Out to "{unit}:HVA:4:LimitOut";
monitor GV_CTST_Lim_Out;
*/

short GV_STDT_In;
assign GV_STDT_In "{unit}:HVA:3:SwitchIn";
short GV_STDT_Out;
assign GV_STDT_Out "{unit}:HVA:3:SwitchOut";

short GV_STDT_Lim_In;
assign GV_STDT_Lim_In to "{unit}:HVA:3:LimitIn";
monitor GV_STDT_Lim_In;

short GV_STDT_Lim_Out;
assign GV_STDT_Lim_Out to "{unit}:HVA:3:LimitOut";
monitor GV_STDT_Lim_Out;

//short ARM_CTST_Status;
//assign ARM_CTST_Status to "{unit}:ARM:1:Status";
//monitor ARM_CTST_Status;

//short ARM_STDT_Status;
//assign ARM_STDT_Status to "{unit}:ARM:2:Status";
//monitor ARM_STDT_Status;

/* Trace message record limited to 40 characters */
string msg;
assign msg to "{unit}:Vacuum:TraceMessage.VAL";

/* Main Vacuum State Set */
ss VacuumSequence {
    state init {
        when (delay(5)) {
            printf("sncEsther: Startup delay over\n");
        } state Idle
    }
    state Idle {
        entry{
            OPSTATE = POS_Idle;
            pvPut(OPSTATE);
        }
        when (delay(10) && (StartReq == START)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                LAST_OPSTATE = POS_Idle;
                pvPut(LAST_OPSTATE);
                /* Pulse state change to Stopped*/
        } state Stopped
    }
    state Stopped {
        entry{
            OPSTATE = POS_Stopped;
            pvPut(OPSTATE);
           // LAST_OPSTATE = POS_Stopped;
            //pvPut(LAST_OPSTATE);
            GV_STDT_In= ON; // TODO repeat for CT-ST
            pvPut(GV_STDT_In);
            CountupDisa = ON;
            pvPut(CountupDisa);
            ADC1_PressureHigh = 1.1e3;
            ADC2_PressureHigh = 1.1e3;
            pvPut(ADC1_PressureHigh);
            pvPut(ADC2_PressureHigh);
        }
        when (delay(10) && (StartReq == START) ) { //  && (IsttokupsBatteryON != ON)) 
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Starting");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                /* Pulse state change to Starting */
                LAST_OPSTATE = POS_Stopped;
                pvPut(LAST_OPSTATE);
        } state Starting
    }

    state Starting {
        entry{
            OPSTATE = POS_Starting;
            pvPut(OPSTATE);
            Countup = 0;
            pvPut(Countup);
            CountupDisa = OFF;
            pvPut(CountupDisa);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                /* Pulse state change to Stopped */
                LAST_OPSTATE = POS_Starting;
                pvPut(LAST_OPSTATE);
        } state Stopped

        when (delay(10) && (StartReq == START) ) { //  && (IsttokupsBatteryON != ON)) 
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to LowVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                /* Pulse state change to Starting */
        } state LowVacuum
    }

    state LowVacuum {
        entry{
            OPSTATE = POS_LowVacuum;
            pvPut(OPSTATE);
            ADC1_PressureHigh = ADC_PressureHighThres;
            ADC2_PressureHigh = ADC_PressureHighThres;
            pvPut(ADC1_PressureHigh);
            pvPut(ADC2_PressureHigh);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Starting");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                // Pulse state change to Stopped
                LAST_OPSTATE = POS_LowVacuum;
                pvPut(LAST_OPSTATE);
        } state Stopping
    }

    state Stopping {
        entry{
            OPSTATE = POS_Stopping;
            pvPut(OPSTATE);
            //ADC1_PressureHigh = ADC_PressureHighThres;
            //ADC2_PressureHigh = ADC_PressureHighThres;
            //pvPut(ADC1_PressureHigh);
            //pvPut(ADC2_PressureHigh);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                // Pulse state change to Stopped
                LAST_OPSTATE = POS_Stopping;
                pvPut(LAST_OPSTATE);
        } state Stopped
    }
}
