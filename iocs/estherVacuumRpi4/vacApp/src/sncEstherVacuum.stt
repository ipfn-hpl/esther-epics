/*
 * vim: syntax=cpp ts=4 sw=4 sts=4 sr et
 * Use :SyntasticToggleMode
 *
 * Project       :  ESTHER Vacuum slow Control
 * Docs: https://www-csr.bessy.de/control/SoftDist/sequencer/
 *
 * Description   : VAcuum Sequence State Machine
 *
 * Author(s)     : Bernardo Carvalho (IPFN-IST)
 * Copyright (c) : (IPFN-IST)
 *
 * Created 5-Sep-2022
 * Revised 
 * Modified 
 *
 **/

program sncEstherVacuum ("output=logFile.txt")
%{#include "errlog.h"}%
%%#include <fcntl.h>    /* for exit() */
%%#include <stdio.h>    /* for  */
%%#include <stdlib.h>    /* for  */
%%#include <string.h>

short POS_Idle = 0;
short POS_Stopped =1;
short POS_Starting=2;
short POS_LowVacuum=3;
short POS_WaitShot=4;
short POS_Stopping=5;
short POS_Emergency=7;
short POS_UPSEmergency=8;

short OFF=0;
short ON=1;
short STOP=0;
short STOP_REQ=1;
short START=1;
short CLEAN=0;
short SHOT=1;
short NO_ALARM=0;
short MINOR=1;
short MAJOR=2;
short INVALID=3;


/* PV variables  
double v;
assign v to "{P}:aiExample";
monitor v;
*/

short OPSTATE;
assign OPSTATE to "{P}:Vacuum:OPSTATE";
monitor OPSTATE;

short LAST_OPSTATE;
assign LAST_OPSTATE to "{P}:Vacuum:LAST-OPSTATE";
monitor LAST_OPSTATE;

short StartReq;
assign StartReq to "{P}:Vacuum:START-REQ";
monitor StartReq;

short StopReq;
assign StopReq to "{P}:Vacuum:STOP-REQ";
monitor StopReq;

short Countup;
assign Countup to "{P}:Vacuum:COUNTUP";
monitor Countup;

short CountupDisa;
assign CountupDisa to "{P}:Vacuum:COUNTUP.DISA";

float CTST_Pressure;
assign CTST_Pressure "{P}:Vacuum:CTST-Pressure";
monitor CTST_Pressure;
float CTST_PressureHigh;
assign CTST_PressureHigh "{P}:Vacuum:CTST-Pressure.HIGH";
float CTST_PressureLow;
assign CTST_PressureLow "{P}:Vacuum:CTST-Pressure.LOW";

float STDT_Pressure;
assign STDT_Pressure "{P}:Vacuum:STDT-Pressure";
monitor STDT_Pressure;
float STDT_PressureHigh;
assign STDT_PressureHigh "{P}:Vacuum:STDT-Pressure.HIGH";
float STDT_PressureLow;
assign STDT_PressureLow "{P}:Vacuum:STDT-Pressure.LOW";

float ADC_PressureLowThres;
assign ADC_PressureLowThres "{P}:Vacuum:PressureLowThres";
monitor ADC_PressureLowThres;
float ADC_PressureHighThres;
assign ADC_PressureHighThres "{P}:Vacuum:PressureHighThres";
monitor ADC_PressureHighThres;


short ARM_CTST_Status;
assign ARM_CTST_Status to "{P}:ARM:1:Status";
monitor ARM_CTST_Status;

short ARM_STDT_Status;
assign ARM_STDT_Status to "{P}:ARM:2:Status";
monitor ARM_STDT_Status;

/* Trace message record limited to 40 characters */
string msg;
assign msg to "{P}:Vacuum:TraceMessage.VAL";

short EDA_CT_Valve;
assign EDA_CT_Valve to "{P}:EDA:CT-Valve";
short EDA_DT_Valve;
assign EDA_DT_Valve to "{P}:EDA:DT-Valve";
short HVA_CTST_Valve;
assign HVA_CTST_Valve to "{P}:HVA:CTST-Valve";
short HVA_STDT_Valve;
assign HVA_STDT_Valve to "{P}:HVA:STDT-Valve";
short HVA_CTST_Lim_In;
assign HVA_CTST_Lim_In to "{P}:HVA:CTST_LS_IN";
monitor HVA_CTST_Lim_In;
short HVA_CTST_Lim_Out;
assign HVA_CTST_Lim_Out to "{P}:HVA:CTST_LS_OUT";
monitor HVA_CTST_Lim_Out;

short HVA_STDT_Lim_In;
assign HVA_STDT_Lim_In to "{P}:HVA:STDT_LS_IN";
monitor HVA_STDT_Lim_In;
short HVA_STDT_Lim_Out;
assign HVA_STDT_Lim_Out to "{P}:HVA:STDT_LS_OUT";
monitor HVA_STDT_Lim_Out;

short EDW_Dry_Pump_CT;
assign EDW_Dry_Pump_CT to "{P}:EDW:DryPump-CT";
short EDW_Dry_Pump_ST;
assign EDW_Dry_Pump_ST to "{P}:EDW:DryPump-ST";
short EDW_Dry_Pump_DT;
assign EDW_Dry_Pump_DT to "{P}:EDW:DryPump-DT";
//monitor GV_STDT_Lim_In;

/* Main Vacuum State Set */
ss VacuumSequence {
    state init {
        when (delay(5)) {
            printf("sncEsther: Startup delay over\n");
        } state Idle
    }
    state Idle {
        entry{
            OPSTATE = POS_Idle;
            pvPut(OPSTATE);
        }
        when (delay(10) && (StartReq == START)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                LAST_OPSTATE = POS_Idle;
                pvPut(LAST_OPSTATE);
                /* Pulse state change to Stopped*/
        } state Stopped
    }
    state Stopped {
        entry{
            OPSTATE = POS_Stopped;
            pvPut(OPSTATE);
           // LAST_OPSTATE = POS_Stopped;
            //pvPut(LAST_OPSTATE);
            HVA_CTST_Valve= ON; // TODO repeat for CT-ST
            pvPut(HVA_CTST_Valve);
            CountupDisa = ON;
            pvPut(CountupDisa);
            CTST_PressureHigh = 1.1e3;
            STDT_PressureHigh = 1.1e3;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
        }
        when (delay(10) && (StartReq == START) ) { //  && (IsttokupsBatteryON != ON)) 
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Starting");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                /* Pulse state change to Starting */
                LAST_OPSTATE = POS_Stopped;
                pvPut(LAST_OPSTATE);
        } state Starting
    }

    state Starting {
        entry{
            OPSTATE = POS_Starting;
            pvPut(OPSTATE);
            Countup = 0;
            pvPut(Countup);
            CountupDisa = OFF;
            pvPut(CountupDisa);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                /* Pulse state change to Stopped */
                LAST_OPSTATE = POS_Starting;
                pvPut(LAST_OPSTATE);
        } state Stopped

        when (delay(10) && (StartReq == START) ) { //  && (IsttokupsBatteryON != ON)) 
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to LowVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                /* Pulse state change to Starting */
        } state LowVacuum
    }

    state LowVacuum {
        entry{
            OPSTATE = POS_LowVacuum;
            pvPut(OPSTATE);
            CTST_PressureHigh = ADC_PressureHighThres;
            STDT_PressureHigh = ADC_PressureHighThres;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Starting");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                // Pulse state change to Stopped
                LAST_OPSTATE = POS_LowVacuum;
                pvPut(LAST_OPSTATE);
        } state Stopping
    }

    state Stopping {
        entry{
            OPSTATE = POS_Stopping;
            pvPut(OPSTATE);
            //CTST_PressureHigh = ADC_PressureHighThres;
            //STDT_PressureHigh = ADC_PressureHighThres;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                // Pulse state change to Stopped
                LAST_OPSTATE = POS_Stopping;
                pvPut(LAST_OPSTATE);
        } state Stopped
    }
}
