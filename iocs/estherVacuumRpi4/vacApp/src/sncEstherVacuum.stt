/*
 * vim: syntax=cpp ts=4 sw=4 sts=4 sr et
 * Use :SyntasticToggleMode
 *
 * Project       :  ESTHER Vacuum slow Control
 * Docs: https://www-csr.bessy.de/control/SoftDist/sequencer/
 *
 * Description   : VAcuum Sequence State Machine
 *
 * Author(s)     : Bernardo Carvalho (IPFN-IST)
 * Copyright (c) : (IPFN-IST)
 *
 * Created 5-Sep-2022
 * Revised 
 * Modified 
 *
 **/

program sncEstherVacuum ("output=logFile.txt")
%{#include "errlog.h"}%
%%#include <fcntl.h>    /* for exit() */
//%%#include <stdio.h>    /* for  */
//%%#include <stdlib.h>    /* for  */
%%#include <string.h>

short POS_Stopped = 0;
short POS_Idle = 1;
short POS_ManualOperation=2;
short POS_StartingLowVacuum=3;
short POS_LowVacuum=4;
short POS_StoppingLowVacuum=5;
short POS_StartingHighVacuum=6;
short POS_HighVacuum=7;
short POS_StoppingHighVacuum=8;
short POS_Emergency=9;
// short POS_UPSEmergency=8;

short IdleState_Inactive = 0;
short IdleState_CheckManual = 1;
short IdleState_OpenArms = 2;
short IdleState_OpenValves = 3;
short IdleState_CheckValves = 4;
short IdleState_End = 9;

short OFF=0;
short ON=1;
short AUTO_ON=0;
short AUTO_OFF=1;
short ARM_STATUS_OPEN=4;
short STOP=0;
short STOP_REQ=1;
short START=1;
short CLEAN=0;
short SHOT=1;
short NO_ALARM=0;
short MINOR=1;
short MAJOR=2;
short INVALID=3;


/* PV variables  
double v;
assign v to "{P}:aiExample";
monitor v;
*/

short OPSTATE;
assign OPSTATE to "{P}:Vacuum:OPSTATE";
//monitor OPSTATE;

short LAST_OPSTATE;
assign LAST_OPSTATE to "{P}:Vacuum:LAST-OPSTATE";
monitor LAST_OPSTATE;

short IdleSubState;
assign IdleSubState to "{P}:Vacuum:Idle-State";

short StartReq;
assign StartReq to "{P}:Vacuum:START-REQ";
monitor StartReq;

short StopReq;
assign StopReq to "{P}:Vacuum:STOP-REQ";
monitor StopReq;

short Countup;
assign Countup to "{P}:Vacuum:COUNTUP";
monitor Countup;

short AutoMode;
assign AutoMode to "{P}:Vacuum:Auto-Mode";
monitor AutoMode;

short CountupDisa;
assign CountupDisa to "{P}:Vacuum:COUNTUP.DISA";

short VacuumDisable;
assign VacuumDisable to "{P}:Vacuum:Disable";
short EdwScuCtStDisable;
assign EdwScuCtStDisable to "{P}:EDW:01:Disable";
short EdwScuStDtDisable;
assign EdwScuStDtDisable to "{P}:EDW:02:Disable";

float CTST_Pressure;
assign CTST_Pressure "{P}:Vacuum:CTST-Pressure";
monitor CTST_Pressure;
float CTST_PressureHigh;
assign CTST_PressureHigh "{P}:Vacuum:CTST-Pressure.HIGH";
float CTST_PressureLow;
assign CTST_PressureLow "{P}:Vacuum:CTST-Pressure.LOW";

float CT_StaticPressure;
assign CT_StaticPressure to "{P}:Vacuum:PT-CT-Static";
monitor CT_StaticPressure;
float DT_StaticPressure;
assign DT_StaticPressure to "{P}:Vacuum:PT-DT-Static";
monitor DT_StaticPressure;
float STDT_Pressure;
assign STDT_Pressure "{P}:Vacuum:STDT-Pressure";
monitor STDT_Pressure;
float STDT_PressureHigh;
assign STDT_PressureHigh "{P}:Vacuum:STDT-Pressure.HIGH";
float STDT_PressureLow;
assign STDT_PressureLow "{P}:Vacuum:STDT-Pressure.LOW";

float ADC_PressureLowThres;
assign ADC_PressureLowThres "{P}:Vacuum:PressureLowThres";
monitor ADC_PressureLowThres;
float ADC_PressureHighThres;
assign ADC_PressureHighThres "{P}:Vacuum:PressureHighThres";
monitor ADC_PressureHighThres;

short ARM_CTST_OutCmd;
assign ARM_CTST_OutCmd to "{P}:ARM:1:SwitchOutCmd";

short ARM_CTST_Status;
assign ARM_CTST_Status to "{P}:ARM:1:Status";
monitor ARM_CTST_Status;

short ARM_STDT_OutCmd;
assign ARM_STDT_OutCmd to "{P}:ARM:2:SwitchOutCmd";

short ARM_STDT_Status;
assign ARM_STDT_Status to "{P}:ARM:2:Status";
monitor ARM_STDT_Status;

short TurboFans;
assign TurboFans to "{P}:Vacuum:Turbo-Fans";
monitor TurboFans;

short HidraulicPressure;
assign HidraulicPressure to  "{P}:Vacuum:Hidraulic-Pressure";
monitor HidraulicPressure;


/* Trace message record limited to 40 characters */
string msg;
assign msg to "{P}:Vacuum:TraceMessage.VAL";

short EDA_CT_Valve;
assign EDA_CT_Valve to "{P}:EDA:CT-Valve";
short EDA_CT_LS2_ON;
assign EDA_CT_LS2_ON to "{P}:EDA:CT-Valve_LS2_ON";
monitor EDA_CT_LS2_ON;
short EDA_DT_Valve;
assign EDA_DT_Valve to "{P}:EDA:DT-Valve";
short EDA_DT_LS2_ON;
assign EDA_DT_LS2_ON to "{P}:EDA:DT-Valve_LS2_ON";
monitor EDA_DT_LS2_ON;

short HVA_CTST_Valve;
assign HVA_CTST_Valve to "{P}:HVA:CTST-Valve";
short HVA_CTST_Lim_In;
assign HVA_CTST_Lim_In to "{P}:HVA:CTST_LS_IN";
monitor HVA_CTST_Lim_In;
short HVA_CTST_Lim_Out;
assign HVA_CTST_Lim_Out to "{P}:HVA:CTST_LS_OUT";
monitor HVA_CTST_Lim_Out;

short HVA_STDT_Valve;
assign HVA_STDT_Valve to "{P}:HVA:STDT-Valve";
short HVA_STDT_Lim_In;
assign HVA_STDT_Lim_In to "{P}:HVA:STDT_LS_IN";
monitor HVA_STDT_Lim_In;
short HVA_STDT_Lim_Out;
assign HVA_STDT_Lim_Out to "{P}:HVA:STDT_LS_OUT";
monitor HVA_STDT_Lim_Out;

short EDW_Dry_Pump_CT;
assign EDW_Dry_Pump_CT to "{P}:EDW:DryPump-CT";
short EDW_Dry_Pump_ST;
assign EDW_Dry_Pump_ST to "{P}:EDW:DryPump-ST";
short EDW_Dry_Pump_DT;
assign EDW_Dry_Pump_DT to "{P}:EDW:DryPump-DT";
//monitor GV_STDT_Lim_In;

/* Main Vacuum State Set */
ss VacuumSequence {
    state init {
        when (delay(5)) {
            printf("sncEsther: Startup delay over\n");
        } state Stopped
    }
    /*
    state Idle {
        entry{
            OPSTATE = POS_Idle;
            pvPut(OPSTATE);
        }
        when (delay(10) && (StartReq == START)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                LAST_OPSTATE = POS_Idle;
                pvPut(LAST_OPSTATE);
        } state Stopped
    }
    */
    state Stopped {
        entry{
            OPSTATE = POS_Stopped;
            pvPut(OPSTATE);
            LAST_OPSTATE = POS_Stopped;
            pvPut(LAST_OPSTATE);
            CountupDisa = ON;
            pvPut(CountupDisa);
            VacuumDisable = ON;
            pvPut(VacuumDisable);
            EdwScuCtStDisable = ON;
            pvPut(EdwScuCtStDisable);
            EdwScuStDtDisable = ON;
            pvPut(EdwScuStDtDisable);
            CTST_PressureHigh = 1.1e3;
            pvPut(CTST_PressureHigh);
            STDT_PressureHigh = 1.1e3;
            pvPut(STDT_PressureHigh);
            HidraulicPressure = 0.0;
            pvPut(HidraulicPressure);
        }
        when (delay(10) && (StartReq == START) ) { //  && (IsttokupsBatteryON != ON)) 
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Idle");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                /* Pulse state change to Idle */
                LAST_OPSTATE = POS_Stopped;
                pvPut(LAST_OPSTATE);
        } state Idle
    }

    state Idle {
        entry{
            OPSTATE = POS_Idle;
            pvPut(OPSTATE);
            Countup = 0;
            pvPut(Countup);
            CountupDisa = OFF;
            pvPut(CountupDisa);
            VacuumDisable = OFF;
            pvPut(VacuumDisable);
            HVA_CTST_Valve = OFF;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = OFF;
            pvPut(HVA_STDT_Valve);
            EdwScuCtStDisable = OFF;
            pvPut(EdwScuCtStDisable);
            EdwScuStDtDisable = OFF;
            pvPut(EdwScuStDtDisable);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                /* Pulse state change to Stopped */
                //LAST_OPSTATE = POS_Starting;
                //pvPut(LAST_OPSTATE);
        } state Stopped

        when (delay(5) && (AutoMode == AUTO_OFF) ) {
                strcpy(msg, "State to ManualOperation");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state ManualOperation
        when (delay(10) && (StartReq == START) ) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to StartingLowVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                /* Pulse state change to Starting */
        } state StartingLowVacuum
    }

    state ManualOperation {
        entry{
            OPSTATE = POS_ManualOperation;
            pvPut(OPSTATE);
            CountupDisa = ON;
            pvPut(CountupDisa);
        }
        when (AutoMode == AUTO_ON) {
                strcpy(msg, "State to Idle");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state Idle
    }
    state StartingLowVacuum {
        entry{
            OPSTATE = POS_StartingLowVacuum;
            pvPut(OPSTATE);
            //CTST_PressureHigh = ADC_PressureHighThres;
            //STDT_PressureHigh = ADC_PressureHighThres;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);
        }
        when (AutoMode == AUTO_ON) {
                strcpy(msg, "State to Idle");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state Idle
    }

    state LowVacuum {
        entry{
            OPSTATE = POS_LowVacuum;
            pvPut(OPSTATE);
            CTST_PressureHigh = ADC_PressureHighThres;
            STDT_PressureHigh = ADC_PressureHighThres;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Starting");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                // Pulse state change to Stopped
                LAST_OPSTATE = POS_LowVacuum;
                pvPut(LAST_OPSTATE);
        //} state Stopping
        } state Idle
    }
}
/*
    state Stopping {
        entry{
            OPSTATE = POS_Stopping;
            pvPut(OPSTATE);
            //CTST_PressureHigh = ADC_PressureHighThres;
            //STDT_PressureHigh = ADC_PressureHighThres;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);
        }
        when ((StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n",msg);
                // Pulse state change to Stopped
                LAST_OPSTATE = POS_Stopping;
                pvPut(LAST_OPSTATE);
        } state Stopped
    }
*/

/*          --------- Sub States--------------- */

/*********** SUB-State: StoppingSequence Set ************/
ss IdleSequence {
    state Inactive {
        entry {
            IdleSubState = IdleState_Inactive;
            pvPut(IdleSubState);
        }

        when (OPSTATE == POS_Idle) {
            ARM_CTST_OutCmd = ON;
            pvPut(ARM_CTST_OutCmd);
            ARM_STDT_OutCmd = ON;
            pvPut(ARM_STDT_OutCmd);
            strcpy(msg, "IdleSubState Mode: CheckManual");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            IdleSubState = IdleState_OpenArms;
            pvPut(IdleSubState);
        } state OpenArms
    }
    state OpenArms {
        when (OPSTATE != POS_Idle ) { } state Inactive
        when  (pvStatus(HidraulicPressure) && (ARM_CTST_Status == ARM_STATUS_OPEN )) {
            strcpy(msg, "IdleSubState Mode: OpenValves");
            pvPut(msg);
            EDA_CT_Valve = ON;
            pvPut(EDA_CT_Valve);
            EDA_DT_Valve = ON;
            pvPut(EDA_DT_Valve);

        } state OpenValves
    }
    state OpenValves {
        when (OPSTATE != POS_Idle ) { } state Inactive
        when  (pvStatus(TurboFans) && (EDA_CT_LS2_ON == ON) && (EDA_DT_LS2_ON == ON)) {
            strcpy(msg, "IdleSubState Mode: OpenValves");
            pvPut(msg);
            HVA_CTST_Valve = ON;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = ON;
            pvPut(HVA_STDT_Valve);

        } state CheckValves
        //when  (pvStatus(IsttokRPump1_Pressure)) 
    }
    state CheckValves {
        when (OPSTATE != POS_Idle ) { } state Inactive
        when  ((HVA_CTST_Lim_Out == 0) && (HVA_STDT_Lim_Out == 0) ) {
            strcpy(msg, "IdleSubState Mode: End");
            pvPut(msg);
            IdleSubState = IdleState_End;
            pvPut(IdleSubState);

        } state End
        //when  (pvStatus(IsttokRPump1_Pressure)) 
    }
    state End {
        when (OPSTATE != POS_Idle ) { } state Inactive
    }
}
/*
short IdleState_CheckManual = 1;
short IdleState_OpenArms = 2;
short IdleState_OpenValves = 3;
short IdleState_CheckValves = 4;
short IdleState_End = 9;

*/
