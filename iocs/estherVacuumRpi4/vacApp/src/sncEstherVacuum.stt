/*
 * vim: syntax=cpp ts=4 sw=4 sts=4 sr et
 * Use :SyntasticToggleMode
 *
 * Project       :  ESTHER Vacuum slow Control
 * Docs: https://www-csr.bessy.de/control/SoftDist/sequencer/
 *
 * Description   : VAcuum Sequence State Machine
 *
 * Author(s)     : Bernardo Carvalho (IPFN-IST)
 * Copyright (c) : (IPFN-IST)
 *
 * Created 5-Sep-2022
 * Revised 
 * Modified 
 *
 **/

program sncEstherVacuum ("output=logFile.txt")
%{#include "errlog.h"}%
//%%#include <fcntl.h>    /* for exit() */

// Program Constansts
short POS_Stopped = 0;
short POS_Idle = 1;
short POS_ManualOperation=2;
short POS_StartingLowVacuum=3;
short POS_LowVacuum=4;
short POS_StoppingLowVacuum=5;
short POS_StartingHighVacuum=6;
short POS_HighVacuum=7;
short POS_StoppingHighVacuum=8;
short POS_StartingShot=9;
short POS_ShotReady=10;
short POS_Emergency=11;
// short POS_UPSEmergency=8;

short SubState_Inactive = 0;
short SubState_End = 9;

short IdleState_CheckManual = 1;
short IdleState_OpenArms = 2;

short StartingLV_OpenValvesPre = 1;
short StartingLV_CheckValvesPre = 2;
//short StartingLV_OpenValves = 1;
short StartingLV_StartPumpDT = 3;
short StartingLV_StartPumpCT = 4;
short StartingLV_StartPumpST = 5;
short StartingLV_OpenValvesPost = 6;
short StartingLV_CheckValvesPost = 7;
short StartingLV_CheckPressure = 8;

short StoppingLV_CheckValves = 1;
//short StoppingLV_CheckPressure = 3;

short StartingHV_CheckPressure = 1;
short StartingHV_CheckPumpsLevit = 2;
short StartingHV_CheckPumpsAccel = 3;
short StartingHV_CheckPumpsNormal = 4;
short StartingHV_CheckHvPressure = 5;

short StoppingHV_CheckPumpsDecel = 1;
short StoppingHV_CloseHvaValves = 2;
short StoppingHV_CheckHvaValves = 3;
short StoppingHV_CheckPumpsLevit = 4;

short StartingShot_CloseArms = 1;
short StartingShot_CloseValves = 2;

//short CtDt_Stopped = 0;
short CtDt_Idle = 1;
short CtDt_ManualOperation=2;
short CtDt_StartingLowVacuum=3;
short CtDt_LowVacuum=4;
short CtDt_StoppingLowVacuum=5;
short CtDt_Emergency=6;

short OFF = 0;
short ON = 1;
short AUTO_ON = 1;
short AUTO_OFF = 0;
short ARM_STATUS_CLOSED = 3;
short ARM_STATUS_OPEN = 4;
short STOP = 0;
short STOP_REQ = 1;
short START = 1;
short CLEAN = 0;
short SHOT = 1;
short NO_ALARM = 0;
short MINOR = 1;
short MAJOR = 2;
short INVALID = 3;

short EdwScuMagLev_START=1;
short EdwScuMagLev_STOP=2;
short EdwScuModFonct_Levitation=1;
short EdwScuModFonct_Acceleration=3;
short EdwScuModFonct_Normal=4;
short EdwScuModFonct_Deceleration=5;
float PressureStop_High = 1.1e3;
float PressureLV_High = 2.0e-1;
float PressureHV_High = 3.0e-4;

float PressLvOpenGvMin = 1.0; // 1 MBar. Open GV if Pres ST > x mBar
// End Program Constansts

/* PV variables  
double v;
assign v to "{P}:aiExample";
monitor v;
*/

short OPSTATE;
assign OPSTATE to "{P}:Vacuum:OPSTATE";
monitor OPSTATE;

short LAST_OPSTATE;
assign LAST_OPSTATE to "{P}:Vacuum:LAST-OPSTATE";
monitor LAST_OPSTATE;

short IdleSubState;
assign IdleSubState to "{P}:Vacuum:Idle-SubState";
monitor IdleSubState;

short StartingLVSubState;
assign StartingLVSubState to "{P}:Vacuum:StartingLV-SubState";
monitor StartingLVSubState;

short StoppingLVSubState;
assign StoppingLVSubState to "{P}:Vacuum:StoppingLV-SubState";
monitor StoppingLVSubState;

short StartingHVSubState;
assign StartingHVSubState to "{P}:Vacuum:StartingHV-SubState";
monitor StartingHVSubState;

short StoppingHVSubState;
assign StoppingHVSubState to "{P}:Vacuum:StoppingHV-SubState";
monitor StoppingHVSubState;

short StartingShotSubState;
assign StartingShotSubState to "{P}:Vacuum:StartingShot-SubState";
monitor StartingShotSubState;

short CtVacuumSubState;
assign CtVacuumSubState to "{P}:Vacuum:CT-Vacuum-SubState";
monitor CtVacuumSubState;

short DtVacuumSubState;
assign DtVacuumSubState to "{P}:Vacuum:DT-Vacuum-SubState";
monitor DtVacuumSubState;

short CtVacuumAutoEnable;
assign CtVacuumAutoEnable to "{P}:Vacuum:CT-Auto-Enable";
monitor CtVacuumAutoEnable;

short DtVacuumAutoEnable;
assign DtVacuumAutoEnable to "{P}:Vacuum:DT-Auto-Enable";
monitor DtVacuumAutoEnable;

short StartReq;
assign StartReq to "{P}:Vacuum:START-REQ";
monitor StartReq;

short StopReq;
assign StopReq to "{P}:Vacuum:STOP-REQ";
monitor StopReq;

short Countup;
assign Countup to "{P}:Vacuum:COUNTUP";
monitor Countup;

short AutoMode;
assign AutoMode to "{P}:Vacuum:Auto-Mode";
monitor AutoMode;

short CountupDisa;
assign CountupDisa to "{P}:Vacuum:COUNTUP.DISA";

short VacuumDisable;
assign VacuumDisable to "{P}:Vacuum:Disable";

short EdwScuCtStModFonct;
assign EdwScuCtStModFonct to "{P}:EDW:01:ReadModFonctWithWarning";
monitor EdwScuCtStModFonct;
short EdwScuCtStDisable;
assign EdwScuCtStDisable to "{P}:EDW:01:Disable";
short EdwScuCtStMagLev;
assign EdwScuCtStMagLev to "{P}:EDW:01:Command";
short EdwScuStDtModFonct;
assign EdwScuStDtModFonct to "{P}:EDW:02:ReadModFonctWithWarning";
monitor EdwScuStDtModFonct;
short EdwScuStDtDisable;
assign EdwScuStDtDisable to "{P}:EDW:02:Disable";
short EdwScuStDtMagLev;
assign EdwScuStDtMagLev to "{P}:EDW:02:Command";

float EdwScuCtStMSpeed;
assign EdwScuCtStMSpeed to "{P}:EDW:01:MSpeed";
monitor EdwScuCtStMSpeed;
float EdwScuStDtMSpeed;
assign EdwScuStDtMSpeed to "{P}:EDW:02:MSpeed";
monitor EdwScuStDtMSpeed;

float CTST_Pressure;
assign CTST_Pressure "{P}:Vacuum:CTST-Pressure";
monitor CTST_Pressure;
float CTST_PressureHigh;
assign CTST_PressureHigh "{P}:Vacuum:CTST-Pressure.HIGH";
//float CTST_PressureLow;
//assign CTST_PressureLow "{P}:Vacuum:CTST-Pressure.LOW";

float CT_StaticPressure;
assign CT_StaticPressure to "{P}:Vacuum:PT-CT-Static";
monitor CT_StaticPressure;
float DT_StaticPressure;
assign DT_StaticPressure to "{P}:Vacuum:PT-DT-Static";
monitor DT_StaticPressure;
float STDT_Pressure;
assign STDT_Pressure "{P}:Vacuum:STDT-Pressure";
monitor STDT_Pressure;
float STDT_PressureHigh;
assign STDT_PressureHigh "{P}:Vacuum:STDT-Pressure.HIGH";
//float STDT_PressureLow;
//assign STDT_PressureLow "{P}:Vacuum:STDT-Pressure.LOW";

    //field(DESC, "Pressure Threshold to Start MagLev")
//float ADC_PressureL2HThres;
//assign ADC_PressureL2HThres "{P}:Vacuum:PressureL2HThres";
//monitor ADC_PressureL2HThres;
//    field(DESC, "Pressure Threshold to Stop MagLev")
//float ADC_PressureH2LThres;
//assign ADC_PressureH2LThres "{P}:Vacuum:PressureH2LThres";
//monitor ADC_PressureH2LThres;

short ARM_CTST_OutCmd;
assign ARM_CTST_OutCmd to "{P}:ARM:1:SwitchOutCmd";
short ARM_CTST_InCmd;
assign ARM_CTST_InCmd to "{P}:ARM:1:SwitchInCmd";

short ARM_CTST_Status;
assign ARM_CTST_Status to "{P}:ARM:1:Status";
monitor ARM_CTST_Status;

short ARM_STDT_OutCmd;
assign ARM_STDT_OutCmd to "{P}:ARM:2:SwitchOutCmd";
short ARM_STDT_InCmd;
assign ARM_STDT_InCmd to "{P}:ARM:2:SwitchInCmd";

short ARM_STDT_Status;
assign ARM_STDT_Status to "{P}:ARM:2:Status";
monitor ARM_STDT_Status;

short TurboFans;
assign TurboFans to "{P}:Vacuum:Turbo-Fans";
monitor TurboFans;

short WaterPump;
assign WaterPump to "{P}:Vacuum:Water-Pump";
monitor WaterPump;

//float HydraulicPressure;
//assign HidraulicPressure to "{P}:Vacuum:Hidraulic-Pressure";
//monitor HidraulicPressure;

float HydraulicPressCC_N;
assign HydraulicPressCC_N to "{P}:Vacuum:PT-HYDEC-CC-N";
monitor HydraulicPressCC_N;

float HydraulicPressCC_S;
assign HydraulicPressCC_S to "{P}:Vacuum:PT-HYDEC-CC-S";
monitor HydraulicPressCC_S;

short HoldVacuum;
assign HoldVacuum to "{P}:Vacuum:HoldVacuum";
// monitor HoldVacuum;

short ResetIdle;
assign ResetIdle to "{P}:Vacuum:ResetIdle";
monitor ResetIdle;

/* Trace message record limited to 40 characters */
string msg;
assign msg to "{P}:Vacuum:TraceMessage.VAL";

short EDA_CT_Valve;
assign EDA_CT_Valve to "{P}:EDA:CT-Valve";
short EDA_CT_LS2_ON;
assign EDA_CT_LS2_ON to "{P}:EDA:CT-Valve_LS2_ON";
monitor EDA_CT_LS2_ON;

short EDA_DT_Valve;
assign EDA_DT_Valve to "{P}:EDA:DT-Valve";
short EDA_DT_LS2_ON;
assign EDA_DT_LS2_ON to "{P}:EDA:DT-Valve_LS2_ON";
monitor EDA_DT_LS2_ON;
short EDA_DT_LS1_ON;
assign EDA_DT_LS1_ON to "{P}:EDA:DT-Valve_LS1_ON";
monitor EDA_DT_LS1_ON;

short HVA_CTST_Valve;
assign HVA_CTST_Valve to "{P}:HVA:CTST-Valve";
short HVA_CTST_Lim_In;
assign HVA_CTST_Lim_In to "{P}:HVA:CTST_LS_IN";
monitor HVA_CTST_Lim_In;
short HVA_CTST_Lim_Out;
assign HVA_CTST_Lim_Out to "{P}:HVA:CTST_LS_OUT";
monitor HVA_CTST_Lim_Out;

short HVA_STDT_Valve;
assign HVA_STDT_Valve to "{P}:HVA:STDT-Valve";
short HVA_STDT_Lim_In;
assign HVA_STDT_Lim_In to "{P}:HVA:STDT_LS_IN";
monitor HVA_STDT_Lim_In;
short HVA_STDT_Lim_Out;
assign HVA_STDT_Lim_Out to "{P}:HVA:STDT_LS_OUT";
monitor HVA_STDT_Lim_Out;

short EDW_Dry_Pump_CT;
assign EDW_Dry_Pump_CT to "{P}:EDW:DryPump-CT";
short EDW_Dry_Pump_ST;
assign EDW_Dry_Pump_ST to "{P}:EDW:DryPump-ST";
short EDW_Dry_Pump_DT;
assign EDW_Dry_Pump_DT to "{P}:EDW:DryPump-DT";
//monitor GV_STDT_Lim_In;
short EDW_Dry_Pump_ST_Temp;
assign EDW_Dry_Pump_ST_Temp to "{P}:EDW:DryPump-ST-Temp";
monitor EDW_Dry_Pump_ST_Temp;
short EDW_Dry_Pump_DT_Temp;
assign EDW_Dry_Pump_DT_Temp to "{P}:EDW:DryPump-DT-Temp";
monitor EDW_Dry_Pump_DT_Temp;

/* Main Vacuum State Set */
ss VacuumSequence {
    state init {
        when (delay(5) && (LAST_OPSTATE == POS_Idle)) {
            printf("sncEsther: Startup delay over. Going Idle\n");
        } state Idle
        when (delay(10) && (LAST_OPSTATE != POS_Idle)) {
            printf("sncEsther: Startup delay over\n");
        } state Stopped
    }
    
    state Stopped {
        entry{
            OPSTATE = POS_Stopped;
            pvPut(OPSTATE);
            LAST_OPSTATE = POS_Stopped;
            pvPut(LAST_OPSTATE);
            CountupDisa = ON;
            pvPut(CountupDisa);
            VacuumDisable = ON;
            pvPut(VacuumDisable);

            AutoMode = ON;
            pvPut(AutoMode);

            HoldVacuum = OFF;
            pvPut(HoldVacuum);

            TurboFans = OFF;
            pvPut(TurboFans);

            WaterPump = OFF;
            pvPut(WaterPump);

            EDW_Dry_Pump_CT = OFF;
            pvPut(EDW_Dry_Pump_CT);
            EDW_Dry_Pump_ST = OFF;
            pvPut(EDW_Dry_Pump_ST);
            EDW_Dry_Pump_DT = OFF;
            pvPut(EDW_Dry_Pump_DT);

            EdwScuCtStMagLev = EdwScuMagLev_STOP;
            pvPut(EdwScuCtStMagLev);
            EdwScuStDtMagLev = EdwScuMagLev_STOP;
            pvPut(EdwScuStDtMagLev);
            EdwScuCtStDisable = ON;
            pvPut(EdwScuCtStDisable );
            EdwScuStDtDisable = ON;
            pvPut(EdwScuStDtDisable);

            EDA_CT_Valve = (EDA_CT_LS2_ON)? ON: OFF;
            pvPut(EDA_CT_Valve);
            
            //EDA_DT_Valve = (EDA_DT_LS2_ON)? ON:  OFF;
            //pvPut(EDA_DT_Valve);
            //EDA_DT_Valve = (EDA_DT_LS2_ON)? ON:  OFF;
            EDA_DT_Valve = ON;  // TODO Invert Valve
            pvPut(EDA_DT_Valve);
            
            HVA_CTST_Valve = OFF;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = OFF;
            pvPut(HVA_STDT_Valve);

            EdwScuCtStDisable = OFF;

            EdwScuCtStDisable = ON;
            pvPut(EdwScuCtStDisable);
            EdwScuStDtDisable = ON;
            pvPut(EdwScuStDtDisable);
            CTST_PressureHigh = PressureStop_High;
            pvPut(CTST_PressureHigh);
            STDT_PressureHigh = PressureStop_High;
            pvPut(STDT_PressureHigh);
            //HidraulicPressure = 0.0;
            //pvPut(HidraulicPressure);
        }
        when (delay(5) && (StartReq == START) ) { //  && (IsttokupsBatteryON != ON)) 
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Idle");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state Idle
    }

    state Idle {
        entry{
            OPSTATE = POS_Idle;
            pvPut(OPSTATE);
            Countup = 0;
            pvPut(Countup);
            CountupDisa = OFF;
            pvPut(CountupDisa);
            VacuumDisable = OFF;
            pvPut(VacuumDisable);

            HoldVacuum = OFF;
            pvPut(HoldVacuum);

            EDW_Dry_Pump_CT = OFF;
            pvPut(EDW_Dry_Pump_CT);
            EDW_Dry_Pump_ST = OFF;
            pvPut(EDW_Dry_Pump_ST);
            EDW_Dry_Pump_DT = OFF;
            pvPut(EDW_Dry_Pump_DT);
            //EDA_DT_Valve = (EDA_DT_LS2_ON)? ON:  OFF;
            EDA_DT_Valve = ON;  // TODO Invert Valve
            pvPut(EDA_DT_Valve);

            HVA_CTST_Valve = OFF;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = OFF;
            pvPut(HVA_STDT_Valve);

            EdwScuCtStDisable = OFF;
            pvPut(EdwScuCtStDisable);
            EdwScuStDtDisable = OFF;
            pvPut(EdwScuStDtDisable);
        }
        when (delay(4) && (StopReq == STOP_REQ) ) { //  && (IsttokupsBatteryON != ON)) {
                strcpy(msg, "State to Stopped");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                /* Pulse state change to Stopped */
                //LAST_OPSTATE = POS_Starting;
                //pvPut(LAST_OPSTATE);
        } state Stopped

        when (delay(60) && (ResetIdle == ON) ) {
                strcpy(msg, "Timed Reset State to Stopped");
                pvPut(msg);
                errlogSevPrintf(MINOR, "%s\n", msg);
        } state Stopped

        when (delay(4) && (AutoMode == AUTO_OFF) ) {
                strcpy(msg, "State to ManualOperation");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state ManualOperation

        when (delay(4) && (StartReq == START) && (IdleSubState == SubState_End) &&
            (pvStatus(HydraulicPressCC_N) == pvStatOK) && (pvStatus(HydraulicPressCC_S) == pvStatOK)) {
                strcpy(msg, "State to StartingLowVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                /* Pulse state change to Starting */
        } state StartingLowVacuum
    }

    state ManualOperation {
        entry{
            OPSTATE = POS_ManualOperation;
            pvPut(OPSTATE);
            CountupDisa = ON;
            pvPut(CountupDisa);
            VacuumDisable = OFF;
            pvPut(VacuumDisable);
        }
        when (AutoMode == AUTO_ON) {
                strcpy(msg, "State to Idle");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state Idle
    }
    state StartingLowVacuum {
        entry{
            OPSTATE = POS_StartingLowVacuum;
            pvPut(OPSTATE);
            VacuumDisable = OFF;
            pvPut(VacuumDisable);
            //CTST_PressureHigh = ADC_PressureHighThres;
            //STDT_PressureHigh = ADC_PressureHighThres;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);
        }
        when (delay(5) && (StopReq == STOP_REQ)) {
        //  && (IsttokupsBatteryON != ON)) {
                strcpy(msg, "State to Stopping LV");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                // Pulse state change to Stopped
        } state StoppingLowVacuum

        when (StartingLVSubState == SubState_End) {
                strcpy(msg, "State to LowVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                LAST_OPSTATE = POS_StartingLowVacuum;
                pvPut(LAST_OPSTATE);

        } state LowVacuum
    }
    state LowVacuum {
        entry{
            OPSTATE = POS_LowVacuum;
            pvPut(OPSTATE);
            LAST_OPSTATE = POS_LowVacuum;
            pvPut(LAST_OPSTATE);
            //CTST_PressureHigh = ADC_PressureL2HThres;
            CTST_PressureHigh = PressureLV_High;
            pvPut(CTST_PressureHigh);
            STDT_PressureHigh = PressureLV_High;
            pvPut(STDT_PressureHigh);
        }
        when (delay(5) && (StopReq == STOP_REQ) ) {
//              &&  (pvStatus(IsttokRPump1_Pressure) == pvStatOK) && (pvStatus(IsttokTMPump1_Emergency) == pvStatOK)) {
                strcpy(msg, "State to Stopping LV");
                pvPut(msg);
                errlogSevPrintf(MINOR, "%s\n", msg);
                // Pulse state change to Stopped
                //LAST_OPSTATE = POS_LowVacuum;
                //pvPut(LAST_OPSTATE);
        } state StoppingLowVacuum
        /*
        when  ((pvStatus(CTST_Pressure) != pvStatOK) ||
                (pvStatus(STDT_Pressure) != pvStatOK)) {
        } state StoppingLowVacuum
        */
        when (delay(10) && (StartReq == START)) {
                strcpy(msg, "State to StartingHighVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                /* Pulse state change to Starting HV */
        } state StartingHighVacuum
    }

    state StoppingLowVacuum {
        entry {
            OPSTATE = POS_StoppingLowVacuum;
            pvPut(OPSTATE);
            LAST_OPSTATE = POS_StoppingLowVacuum;
            pvPut(LAST_OPSTATE);
        }
        when (StoppingLVSubState == SubState_End) {
                strcpy(msg, "State to Idle");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state Idle
    }


    state StartingHighVacuum {
        entry{
            OPSTATE = POS_StartingHighVacuum;
            pvPut(OPSTATE);
        }
        when (StopReq == STOP_REQ) {
                strcpy(msg, "State to Stopping HV");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                // Pulse state change to Stopped
        //} state Stopping
        } state LowVacuum
        when (StartingHVSubState == SubState_End) {
                strcpy(msg, "State to HighVacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                LAST_OPSTATE = POS_HighVacuum;
                pvPut(LAST_OPSTATE);

        } state HighVacuum
    }

    state HighVacuum {
        entry{
            OPSTATE = POS_HighVacuum;
            pvPut(OPSTATE);
            /*
            CTST_PressureHigh = 1.0e-4; //ADC_PressureH2LThres;
            STDT_PressureHigh = 1.0e-4; //ADC_PressureH2LThres;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
            */
        }
        when (StopReq == STOP_REQ) {
                strcpy(msg, "State to Stopping HV");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                //LAST_OPSTATE = POS_HighVacuum;
                //pvPut(LAST_OPSTATE);
        } state StoppingHighVacuum
        when  (delay(10) && ((pvStatus(CTST_Pressure) != pvStatOK) ||
                (pvStatus(STDT_Pressure) != pvStatOK) )) {
                strcpy(msg, "Pressure Alarm. State to Stopping HV");
                pvPut(msg);
                errlogSevPrintf(MINOR, "%s\n", msg);
        } state StoppingHighVacuum

        when (delay(10) && (StartReq == START)) {
                strcpy(msg, "State to Starting Shot");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state StartingShot
    }

    state StoppingHighVacuum {
        entry {
            OPSTATE = POS_StoppingHighVacuum;
            pvPut(OPSTATE);
        }
        when (StoppingHVSubState == SubState_End) {
                strcpy(msg, "State to Low Vacuum");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state LowVacuum
    }

    state StartingShot {
        entry{
            OPSTATE = POS_StartingShot;
            pvPut(OPSTATE);
        }
        when (delay(5) && (StopReq == STOP_REQ)) {
                strcpy(msg, "State to Stopping HV");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                // Pulse state change to Stopped
        } state StoppingHighVacuum

        when (StartingShotSubState == SubState_End) {
                strcpy(msg, "State to ShotReady");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
                LAST_OPSTATE = POS_StartingShot;
                pvPut(LAST_OPSTATE);

        } state ShotReady
    }

    state ShotReady {
        entry{
            OPSTATE = POS_ShotReady;
            pvPut(OPSTATE);
            LAST_OPSTATE = POS_ShotReady;
            pvPut(LAST_OPSTATE);
        }
        when (StopReq == STOP_REQ) {
                strcpy(msg, "State to Stopping HV");
                pvPut(msg);
                errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state StoppingHighVacuum
    }
}

//--          --------- Sub States---------------

/*********** SUB-State: StoppingSequence Set ************/
ss IdleSequence {
    state Inactive {
        entry {
            IdleSubState = SubState_Inactive;
            pvPut(IdleSubState);
            //strcpy(msg, "IdleSubState Mode: Inactive");
            //pvPut(msg);
            //errlogSevPrintf(NO_ALARM, "%s\n", msg);
        }

        when (OPSTATE == POS_Idle) {
        /*
            ARM_CTST_OutCmd = ON;
            pvPut(ARM_CTST_OutCmd);
            ARM_STDT_OutCmd = ON;
            pvPut(ARM_STDT_OutCmd);
            strcpy(msg, "IdleSubState Mode: OpenArms");
          */
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\t", msg);
            errlogSevPrintf(NO_ALARM, "%d\n", pvStatus(HydraulicPressCC_N));
            IdleSubState = IdleState_OpenArms;
            pvPut(IdleSubState);
        } state OpenArms
    }
    state OpenArms {
        when (OPSTATE != POS_Idle ) { } state Inactive
        when  ((pvStatus(HydraulicPressCC_N) == pvStatOK)) {
        /*&&
            (ARM_CTST_Status == ARM_STATUS_OPEN ) &&
            (ARM_STDT_Status == ARM_STATUS_OPEN )) { */
            strcpy(msg, "IdleSubState Mode: End");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            EDA_CT_Valve = ON;
            pvPut(EDA_CT_Valve);
            //EDA_DT_Valve = ON;
            //pvPut(EDA_DT_Valve);
            IdleSubState = SubState_End;
            pvPut(IdleSubState);
            LAST_OPSTATE = POS_Idle;
            pvPut(LAST_OPSTATE);

        } state End
    }
    state End {
        when (OPSTATE != POS_Idle ) { } state Inactive
    }
}

ss StartingLVSequence {
    state Inactive {
        entry {
            StartingLVSubState = SubState_Inactive;
            pvPut(StartingLVSubState);
        }

        when (OPSTATE == POS_StartingLowVacuum && pvStatus(TurboFans) == pvStatOK) {
            //EDW_Dry_Pump_DT = ON;
            //pvPut(EDW_Dry_Pump_DT);
            //CTST_PressureHigh = 500;
            //STDT_PressureHigh = 500;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);

            strcpy(msg, "StartingLV SS: OpenValvesPre");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_OpenValvesPre;
            pvPut(StartingLVSubState);
        } state OpenValvesPre
    }
    state OpenValvesPre {
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        //when  ((pvStatus(TurboFans) == pvStatOK) && (EDA_CT_LS2_ON == ON) &&
        //            (EDA_DT_LS2_ON == ON)) {
        when  (delay(3) && ((pvStatus(CTST_Pressure) == pvStatOK) &&
                CTST_Pressure >= PressLvOpenGvMin)) {
            strcpy(msg, "StartingLV SS: CheckValvesPre");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            HVA_CTST_Valve = ON;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = ON;
            pvPut(HVA_STDT_Valve);
            StartingLVSubState = StartingLV_CheckValvesPre;
            pvPut(StartingLVSubState);

        } state CheckValvesPre
        // ST Perssure is sufficient Low. Open HVA Valves later
        when  (delay(5) && ((pvStatus(CTST_Pressure) == pvStatOK) &&
                CTST_Pressure < PressLvOpenGvMin)) {
            strcpy(msg, "StartingLV SS: StartPump_DT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_StartPumpDT;
            pvPut(StartingLVSubState);

        } state StartDryPumpDT
    }
    state CheckValvesPre {
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        when  ((HVA_CTST_Lim_Out == ON) && (HVA_STDT_Lim_Out == ON) ) {
            //strcpy(msg, "IdleSubState Mode: End");
            strcpy(msg, "StartingLV SS: StartPump_DT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_StartPumpDT;
            pvPut(StartingLVSubState);

        } state StartDryPumpDT
    }
    state StartDryPumpDT {
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        when (delay(5) && (DtVacuumAutoEnable == OFF)) {
            strcpy(msg, "StartingLV SS: Bypassing-> StartPump_DT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_StartPumpCT;
            pvPut(StartingLVSubState);
        } state StartDryPumpCT
        when (delay(60) && (DT_StaticPressure < 300)) {
            strcpy(msg, "StartingLV SS: StartPump_CT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_StartPumpCT;
            pvPut(StartingLVSubState);
        } state StartDryPumpCT
    }
    state StartDryPumpCT {
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        when (delay(2) && CtVacuumAutoEnable == OFF) {

            strcpy(msg, "StartingLV SS: Bypassing-> StartPump_CT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_CheckPressure;
            pvPut(StartingLVSubState);
        } state StartDryPumpST
        when (delay(5) && CT_StaticPressure < 500) {
            strcpy(msg, "StartingLVSubState: StartDryPumpST");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_CheckPressure;
            pvPut(StartingLVSubState);
        } state StartDryPumpST
    }
    state StartDryPumpST {
        entry {
            EDW_Dry_Pump_ST = ON;
            pvPut(EDW_Dry_Pump_ST);
            CTST_PressureHigh = PressureLV_High;
            STDT_PressureHigh = PressureLV_High;
            //CTST_PressureHigh = 1e-1; //ADC_PressureL2HThres;
            //STDT_PressureHigh = 1e-1; //ADC_PressureL2HThres;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
        }
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        when (delay(50)) {
            strcpy(msg, "StartingLVSubState: OpenValvesPost");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_OpenValvesPost;
            pvPut(StartingLVSubState);
        } state OpenValvesPost
    }
    state OpenValvesPost {
        entry {
            HVA_CTST_Valve = ON;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = ON;
            pvPut(HVA_STDT_Valve);

        }
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        when  ((HVA_CTST_Lim_Out == ON) && (HVA_STDT_Lim_Out == ON) ) {
            strcpy(msg, "StartingLVSubState: CheckPressure");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingLVSubState = StartingLV_CheckPressure;
            pvPut(StartingLVSubState);
        } state CheckPressure
    }
    state CheckPressure {
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
        when (delay(20) && (pvStatus(CTST_Pressure) == pvStatOK) &&
                    (pvStatus(STDT_Pressure)== pvStatOK)) {
            strcpy(msg, "StartingLVSubState: End");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n",msg);
            StartingLVSubState = SubState_End;
            pvPut(StartingLVSubState);
        } state End
    }
    state End {
        when (OPSTATE != POS_StartingLowVacuum ) { } state Inactive
    }
}

ss StoppingLVSequence {
    state Inactive {
        entry {
            StoppingLVSubState = SubState_Inactive;
            pvPut(StoppingLVSubState);
        }

        when (OPSTATE == POS_StoppingLowVacuum) {
            HVA_CTST_Valve = OFF;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = OFF;
            pvPut(HVA_STDT_Valve);

            strcpy(msg, "StoppingLV SubState: CheckValves");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StoppingLVSubState = StoppingLV_CheckValves;
            pvPut(StoppingLVSubState);
        } state CheckValves
    }

    state CheckValves {
        when (OPSTATE != POS_StoppingLowVacuum ) { } state Inactive
        when  ((HVA_CTST_Lim_In == ON) && (HVA_STDT_Lim_In == ON) ) {
            //EDW_Dry_Pump_CT = OFF;
            //pvPut(EDW_Dry_Pump_CT);
            EDW_Dry_Pump_ST = OFF;
            pvPut(EDW_Dry_Pump_ST);
            //EDW_Dry_Pump_DT = OFF;
            //pvPut(EDW_Dry_Pump_DT);
            //CTST_PressureHigh = ADC_PressureL2HThres;
            // STDT_PressureHigh = ADC_PressureL2HThres;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);
            strcpy(msg, "StoppingLVSubState Mode: End");
            pvPut(msg);
            StoppingLVSubState = SubState_End;
            pvPut(StoppingLVSubState);

        } state End
    }
    state End {
        when (OPSTATE != POS_StoppingLowVacuum ) { } state Inactive
    }
}

ss StartingHVSequence {
    state Inactive {
        entry {
            StartingHVSubState = SubState_Inactive;
            pvPut(StartingHVSubState);
        }

        when (OPSTATE == POS_StartingHighVacuum) {
        /*
            CTST_PressureHigh = ADC_PressureL2HThres;
            STDT_PressureHigh = ADC_PressureL2HThres;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
*/
            strcpy(msg, "StartingHV SubState: CheckPressure");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingHVSubState = StartingHV_CheckPressure;
            pvPut(StartingHVSubState);
        } state CheckPressure
    }
    state CheckPressure {
        when (OPSTATE != POS_StartingHighVacuum ) { } state Inactive
        when  ((pvStatus(CTST_Pressure) == pvStatOK) &&
                (pvStatus(STDT_Pressure) == pvStatOK)) {
            strcpy(msg, "StartingHV SubState: CheckPumps Levit");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingHVSubState = StartingHV_CheckPumpsLevit;
            pvPut(StartingHVSubState);
        } state CheckPumpsLevit
    }
    state CheckPumpsLevit {
        when (OPSTATE != POS_StartingHighVacuum ) { } state Inactive
        when  ((EdwScuCtStModFonct == EdwScuModFonct_Levitation) &&
                (EdwScuStDtModFonct == EdwScuModFonct_Levitation)) {
            EdwScuCtStMagLev = EdwScuMagLev_START;
            pvPut(EdwScuCtStMagLev);
            EdwScuStDtMagLev = EdwScuMagLev_START;
            pvPut(EdwScuStDtMagLev);
            strcpy(msg, "StartingHV SubState: CheckPumps Accel");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingHVSubState = StartingHV_CheckPumpsAccel;
            pvPut(StartingHVSubState);
        } state CheckPumpsAccel
    }
    state CheckPumpsAccel {
        when (OPSTATE != POS_StartingHighVacuum ) { } state Inactive
        when  (delay(2) && ((EdwScuCtStModFonct == EdwScuModFonct_Acceleration) &&
            (EdwScuStDtModFonct == EdwScuModFonct_Acceleration))) {
            StartingHVSubState = StartingHV_CheckPumpsNormal;
            pvPut(StartingHVSubState);
        } state CheckPumpsNormal
    }
    state CheckPumpsNormal {
        when (OPSTATE != POS_StartingHighVacuum ) { } state Inactive
        when  (delay(30) && (EdwScuCtStModFonct == EdwScuModFonct_Normal) &&
                (EdwScuStDtModFonct == EdwScuModFonct_Normal)) {
            CTST_PressureHigh = PressureHV_High;
            STDT_PressureHigh = PressureHV_High;
            pvPut(CTST_PressureHigh);
            pvPut(STDT_PressureHigh);
            strcpy(msg, "StartingHV SubState: CheckP HV pressure");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingHVSubState = StartingHV_CheckHvPressure;
            pvPut(StartingHVSubState);
        } state CheckHvPressure
    }
    state CheckHvPressure {
        when (OPSTATE != POS_StartingHighVacuum ) { } state Inactive
        when  (delay(15) && ((pvStatus(CTST_Pressure) == pvStatOK) &&
                (pvStatus(STDT_Pressure) == pvStatOK))) {
            strcpy(msg, "StartingHV SubState: End");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingHVSubState = SubState_End;
            pvPut(StartingHVSubState);
        } state End
    }
    state End {
        when (OPSTATE != POS_StartingHighVacuum ) { } state Inactive
    }
}

ss StoppingHVSequence {
    state Inactive {
        entry {
            StoppingHVSubState = SubState_Inactive;
            pvPut(StoppingHVSubState);
        }

        when (OPSTATE == POS_StoppingHighVacuum) {

            EdwScuCtStMagLev = EdwScuMagLev_STOP;
            pvPut(EdwScuCtStMagLev);
            EdwScuStDtMagLev = EdwScuMagLev_STOP;
            pvPut(EdwScuStDtMagLev);
            //CTST_PressureHigh = ADC_PressureL2HThres;
            CTST_PressureHigh = PressureLV_High;
            pvPut(CTST_PressureHigh);
            STDT_PressureHigh = PressureLV_High;
            //STDT_PressureHigh = ADC_PressureL2HThres;
            pvPut(STDT_PressureHigh);
            strcpy(msg, "StoppingHV SubState: CheckPumpsDecel");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StoppingHVSubState = StoppingHV_CheckPumpsDecel;
            pvPut(StoppingHVSubState);
        } state CheckPumpsDecel
    }
    state CheckPumpsDecel {
        when (OPSTATE != POS_StoppingHighVacuum ) { } state Inactive
        when  (delay(5) && ((EdwScuCtStModFonct == EdwScuModFonct_Deceleration) &&
            (EdwScuStDtModFonct == EdwScuModFonct_Deceleration) )) {
            strcpy(msg, "StoppingHV SubState: CloseHvaValves");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StoppingHVSubState = StoppingHV_CloseHvaValves;
            pvPut(StoppingHVSubState);
        } state CloseHvaValves
    }
    state CloseHvaValves {
        when (OPSTATE != POS_StoppingHighVacuum ) { } state Inactive
        when  (delay(5) && (EdwScuCtStMSpeed <= 5000.0) &&
            (EdwScuStDtMSpeed <= 5000.0) ) {
            HVA_CTST_Valve = OFF;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = OFF;
            pvPut(HVA_STDT_Valve);

            strcpy(msg, "StoppingHV SubState: CheckPumpsLevit");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StoppingHVSubState = StoppingHV_CheckPumpsLevit;
            pvPut(StoppingHVSubState);
        } state CheckPumpsLevit
    }
            // TODO : Check Valves?
    //state CheckHvaValves {
    state CheckPumpsLevit{
        when (OPSTATE != POS_StoppingHighVacuum ) { } state Inactive
        when  (delay(10) && ((EdwScuCtStModFonct == EdwScuModFonct_Levitation) &&
                (EdwScuStDtModFonct == EdwScuModFonct_Levitation))) {
            strcpy(msg, "StoppingHV SubState: End");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StoppingHVSubState = SubState_End;
            pvPut(StoppingHVSubState);
        } state End
    }
    state End {
        when (OPSTATE != POS_StoppingHighVacuum ) { } state Inactive
    }
}

ss StartingShotSequence {
    state Inactive {
        entry {
            StartingShotSubState = SubState_Inactive;
            pvPut(StartingShotSubState);
        }

        when (delay(10) && (OPSTATE == POS_StartingShot)) {
            /*
            ARM_CTST_InCmd = ON;
            pvPut(ARM_CTST_InCmd);
            ARM_STDT_InCmd = ON;
            pvPut(ARM_STDT_InCmd);
            */
            strcpy(msg, "StartingShot SubState: CloseArms");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingShotSubState = StartingShot_CloseArms;
            pvPut(StartingShotSubState);
        } state CloseArms
    }
    state CloseArms {
        //when  (delay(10) && (ARM_CTST_Status == ARM_STATUS_CLOSED ) &&
        //        (ARM_CTST_Status == ARM_STATUS_CLOSED )) {
        when  (delay(10)) {
            strcpy(msg, "StartingShot SubState: Close HVA Valves");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingShotSubState = StartingShot_CloseValves;
            pvPut(StartingShotSubState);
        } state CloseValves
    }
    state CloseValves {
        // CHeck HVA Valves Open here
        when  (delay(10)) {
            HVA_CTST_Valve = OFF;
            pvPut(HVA_CTST_Valve);
            HVA_STDT_Valve = OFF;
            pvPut(HVA_STDT_Valve);

            strcpy(msg, "StartingShot SubState: End");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            StartingShotSubState = SubState_End;
            pvPut(StartingShotSubState);
        } state End
    }
    state End {
        when (OPSTATE != POS_StartingShot ) { } state Inactive
    }
}
ss CtVacuumSequence {
    state Inactive {
        entry {
            //EDW_Dry_Pump_CT = ON;
            //pvPut(EDW_Dry_Pump_CT);
            CtVacuumSubState = SubState_Inactive;
            pvPut(CtVacuumSubState);
        }
         when (OPSTATE == POS_StartingLowVacuum && CtVacuumAutoEnable == ON) {
            //CTST_PressureHigh = 500;
            //STDT_PressureHigh = 500;
            //pvPut(CTST_PressureHigh);
            //pvPut(STDT_PressureHigh);
            EDW_Dry_Pump_CT = ON;
            pvPut(EDW_Dry_Pump_CT);
            strcpy(msg, "CtVacuumSequence SS: StartingDryPumpCT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            CtVacuumSubState = CtDt_StartingLowVacuum;
            pvPut(CtVacuumSubState);

        } state StartingDryPumpCT
    }
    state StartingDryPumpCT {
        when (OPSTATE != POS_StartingLowVacuum ) {  // if abort, 
            EDW_Dry_Pump_CT = OFF;
            pvPut(EDW_Dry_Pump_CT);

        } state Inactive
        //when ((CT_StaticPressure < 500)) {
         //when (delay(10) && OPSTATE == POS_StartingLowVacuum) {
        when ((CT_StaticPressure < 500)) {
            CtVacuumSubState = CtDt_LowVacuum;
            pvPut(CtVacuumSubState);

            //EDW_Dry_Pump_CT = ON;
            //pvPut(EDW_Dry_Pump_CT);
            strcpy(msg, "CtVacuumSequence SS: LowVacuumCT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state LowVacuumCT
    }
    state LowVacuumCT {
        when (OPSTATE == POS_StoppingLowVacuum || OPSTATE == POS_Idle) {
            if (CtVacuumAutoEnable == ON) {
                EDW_Dry_Pump_CT = OFF;
                pvPut(EDW_Dry_Pump_CT);
            }
            strcpy(msg, "CtVacuumSequence SS: Inactive");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state Inactive

    }
}
ss DtVacuumSequence {
    state Inactive {
        entry {
            //EDW_Dry_Pump_DT = ON;
            //pvPut(EDW_Dry_Pump_DT);
            DtVacuumSubState = SubState_Inactive;
            pvPut(DtVacuumSubState);
        }
         when (OPSTATE == POS_StartingLowVacuum && DtVacuumAutoEnable == ON) {
            //EDA_DT_Valve = (EDA_DT_LS2_ON)? ON:  OFF;
            EDA_DT_Valve = OFF;  // TODO Invert Valve
            pvPut(EDA_DT_Valve);
            EDW_Dry_Pump_DT = ON;
            pvPut(EDW_Dry_Pump_DT);
            strcpy(msg, "CtVacuumSequence SS: StartingDryPumpDT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
            DtVacuumSubState = CtDt_StartingLowVacuum;
            pvPut(DtVacuumSubState);

        } state StartingDryPumpDT
    }
    state StartingDryPumpDT {
        when (OPSTATE != POS_StartingLowVacuum ) {  // if abort, 
            EDW_Dry_Pump_DT = OFF;
            pvPut(EDW_Dry_Pump_DT);

        } state Inactive
        //when ((CT_StaticPressure < 500)) {
         //when (delay(10) && OPSTATE == POS_StartingLowVacuum) {
        when ((DT_StaticPressure < 500)) {
            DtVacuumSubState = CtDt_LowVacuum;
            pvPut(DtVacuumSubState);

            //EDW_Dry_Pump_DT = ON;
            //pvPut(EDW_Dry_Pump_DT);
            strcpy(msg, "DtVacuumSequence SS: LowVacuumDT");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);
        } state LowVacuumDT
    }
    state LowVacuumDT {
        when (OPSTATE == POS_StoppingLowVacuum || OPSTATE == POS_Idle) {
            if (DtVacuumAutoEnable == ON) {
                EDW_Dry_Pump_DT = OFF;
                pvPut(EDW_Dry_Pump_DT);
            }
            strcpy(msg, "DtVacuumSequence SS: Inactive");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n", msg);

        } state Inactive

    }
}
//short CtDt_StoppingLowVacuum=5;
